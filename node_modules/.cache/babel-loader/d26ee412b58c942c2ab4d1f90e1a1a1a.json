{"ast":null,"code":"/*!\n * Sakura.js 1.1.1\n * Vanilla JS version of jQuery-Sakura: Make it rain sakura petals.\n * https://github.com/jhammann/sakura\n *\n * Copyright 2019-2019 Jeroen Hammann\n *\n * Released under the MIT License\n *\n * Released on: September 4, 2019\n */\n\"use strict\";\n\nvar Sakura = function Sakura(selector, options) {\n  var _this = this;\n\n  if (typeof selector === 'undefined') {\n    throw new Error('No selector present. Define an element.');\n  }\n\n  this.el = document.querySelector(selector); // Defaults for the option object, which gets extended below.\n\n  var defaults = {\n    className: 'sakura',\n    // Classname of the petal. This corresponds with the css.\n    fallSpeed: 1,\n    // Speed factor in which the petal falls (higher is slower).\n    maxSize: 14,\n    // The maximum size of the petal.\n    minSize: 10,\n    // The minimum size of the petal.\n    delay: 300,\n    // Delay between petals.\n    colors: [{\n      // You can add multiple colors (chosen randomly) by adding elements to the array.\n      gradientColorStart: 'rgba(255, 183, 197, 0.9)',\n      // Gradient color start (rgba).\n      gradientColorEnd: 'rgba(255, 197, 208, 0.9)',\n      // Gradient color end (rgba).\n      gradientColorDegree: 120 // Gradient degree angle.\n\n    }]\n  }; // Merge defaults with user options.\n\n  var extend = function extend(originalObj, newObj) {\n    Object.keys(originalObj).forEach(function (key) {\n      if (newObj && Object.prototype.hasOwnProperty.call(newObj, key)) {\n        var origin = originalObj;\n        origin[key] = newObj[key];\n      }\n    });\n    return originalObj;\n  };\n\n  this.settings = extend(defaults, options); // Hide horizontal scrollbars on the target element.\n\n  this.el.style.overflowX = 'hidden'; // Random array element\n\n  function randomArrayElem(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  } // Random integer\n\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  } // Check for animation events.\n\n\n  var prefixes = ['webkit', 'moz', 'MS', 'o', ''];\n\n  function PrefixedEvent(element, type, callback) {\n    for (var p = 0; p < prefixes.length; p += 1) {\n      var animType = type;\n\n      if (!prefixes[p]) {\n        animType = type.toLowerCase();\n      }\n\n      element.addEventListener(prefixes[p] + animType, callback, false);\n    }\n  } // Check if the element is in the viewport.\n\n\n  function elementInViewport(el) {\n    var rect = el.getBoundingClientRect();\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n  }\n\n  this.createPetal = function () {\n    if (_this.el.dataset.sakuraAnimId) {\n      setTimeout(function () {\n        window.requestAnimationFrame(_this.createPetal);\n      }, _this.settings.delay);\n    } // Name the animations. These have to match the animations in the CSS file.\n\n\n    var animationNames = {\n      blowAnimations: ['blow-soft-left', 'blow-medium-left', 'blow-soft-right', 'blow-medium-right'],\n      swayAnimations: ['sway-0', 'sway-1', 'sway-2', 'sway-3', 'sway-4', 'sway-5', 'sway-6', 'sway-7', 'sway-8']\n    }; // Get one random animation of each type and randomize fall time of the petals\n\n    var blowAnimation = randomArrayElem(animationNames.blowAnimations);\n    var swayAnimation = randomArrayElem(animationNames.swayAnimations);\n\n    var fallTime = (document.documentElement.clientHeight * 0.007 + Math.round(Math.random() * 5)) * _this.settings.fallSpeed; // Create animations\n\n\n    var animationsArr = [\"fall \".concat(fallTime, \"s linear 0s 1\"), \"\".concat(blowAnimation, \" \").concat((fallTime > 30 ? fallTime : 30) - 20 + randomInt(0, 20), \"s linear 0s infinite\"), \"\".concat(swayAnimation, \" \").concat(randomInt(2, 4), \"s linear 0s infinite\")];\n    var animations = animationsArr.join(', '); // Create petal and give it a random size.\n\n    var petal = document.createElement('div');\n    petal.classList.add(_this.settings.className);\n    var height = randomInt(_this.settings.minSize, _this.settings.maxSize);\n    var width = height - Math.floor(randomInt(0, _this.settings.minSize) / 3); // Get a random color.\n\n    var color = randomArrayElem(_this.settings.colors);\n    petal.style.background = \"linear-gradient(\".concat(color.gradientColorDegree, \"deg, \").concat(color.gradientColorStart, \", \").concat(color.gradientColorEnd, \")\");\n    petal.style.webkitAnimation = animations;\n    petal.style.animation = animations;\n    petal.style.borderRadius = \"\".concat(randomInt(_this.settings.maxSize, _this.settings.maxSize + Math.floor(Math.random() * 10)), \"px \").concat(randomInt(1, Math.floor(width / 4)), \"px\");\n    petal.style.height = \"\".concat(height, \"px\");\n    petal.style.left = \"\".concat(Math.random() * document.documentElement.clientWidth - 100, \"px\");\n    petal.style.marginTop = \"\".concat(-(Math.floor(Math.random() * 20) + 15), \"px\");\n    petal.style.width = \"\".concat(width, \"px\"); // Remove petals of which the animation ended.\n\n    PrefixedEvent(petal, 'AnimationEnd', function () {\n      if (!elementInViewport(petal)) {\n        petal.remove();\n      }\n    }); // Remove petals that float out of the viewport.\n\n    PrefixedEvent(petal, 'AnimationIteration', function () {\n      if (!elementInViewport(petal)) {\n        petal.remove();\n      }\n    }); // Add the petal to the target element.\n\n    _this.el.appendChild(petal);\n  };\n\n  this.el.setAttribute('data-sakura-anim-id', window.requestAnimationFrame(this.createPetal));\n};\n\nSakura.prototype.start = function () {\n  var animId = this.el.dataset.sakuraAnimId;\n\n  if (!animId) {\n    this.el.setAttribute('data-sakura-anim-id', window.requestAnimationFrame(this.createPetal));\n  } else {\n    throw new Error('Sakura is already running.');\n  }\n};\n\nSakura.prototype.stop = function () {\n  var _this2 = this;\n\n  var graceful = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var animId = this.el.dataset.sakuraAnimId;\n\n  if (animId) {\n    window.cancelAnimationFrame(animId);\n    this.el.setAttribute('data-sakura-anim-id', '');\n  } // Remove all current blossoms at once.\n  // You can also set 'graceful' to true to stop new petals from being created.\n  // This way the petals won't be removed abruptly.\n\n\n  if (!graceful) {\n    setTimeout(function () {\n      var petals = document.getElementsByClassName(_this2.settings.className);\n\n      while (petals.length > 0) {\n        petals[0].parentNode.removeChild(petals[0]);\n      }\n    }, this.settings.delay + 50);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}